// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: nfs.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_nfs_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_nfs_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3010000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3010000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_nfs_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_nfs_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[5]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_nfs_2eproto;
namespace NFS {
class attributes;
class attributesDefaultTypeInternal;
extern attributesDefaultTypeInternal _attributes_default_instance_;
class directory;
class directoryDefaultTypeInternal;
extern directoryDefaultTypeInternal _directory_default_instance_;
class fileInfo;
class fileInfoDefaultTypeInternal;
extern fileInfoDefaultTypeInternal _fileInfo_default_instance_;
class request;
class requestDefaultTypeInternal;
extern requestDefaultTypeInternal _request_default_instance_;
class response;
class responseDefaultTypeInternal;
extern responseDefaultTypeInternal _response_default_instance_;
}  // namespace NFS
PROTOBUF_NAMESPACE_OPEN
template<> ::NFS::attributes* Arena::CreateMaybeMessage<::NFS::attributes>(Arena*);
template<> ::NFS::directory* Arena::CreateMaybeMessage<::NFS::directory>(Arena*);
template<> ::NFS::fileInfo* Arena::CreateMaybeMessage<::NFS::fileInfo>(Arena*);
template<> ::NFS::request* Arena::CreateMaybeMessage<::NFS::request>(Arena*);
template<> ::NFS::response* Arena::CreateMaybeMessage<::NFS::response>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace NFS {

// ===================================================================

class request :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:NFS.request) */ {
 public:
  request();
  virtual ~request();

  request(const request& from);
  request(request&& from) noexcept
    : request() {
    *this = ::std::move(from);
  }

  inline request& operator=(const request& from) {
    CopyFrom(from);
    return *this;
  }
  inline request& operator=(request&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const request& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const request* internal_default_instance() {
    return reinterpret_cast<const request*>(
               &_request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(request& a, request& b) {
    a.Swap(&b);
  }
  inline void Swap(request* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline request* New() const final {
    return CreateMaybeMessage<request>(nullptr);
  }

  request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<request>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const request& from);
  void MergeFrom(const request& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(request* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "NFS.request";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_nfs_2eproto);
    return ::descriptor_table_nfs_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGensFieldNumber = 15,
    kNameFieldNumber = 1,
    kPathFieldNumber = 10,
    kDataFieldNumber = 11,
    kCommandFieldNumber = 13,
    kAttrFieldNumber = 2,
    kFiFieldNumber = 6,
    kTodirfhFieldNumber = 3,
    kFromfhFieldNumber = 4,
    kFhFieldNumber = 5,
    kSizeFieldNumber = 7,
    kOffsetFieldNumber = 8,
    kDirfhFieldNumber = 9,
    kIsDataSyncFieldNumber = 12,
    kGenFieldNumber = 14,
  };
  // repeated int32 gens = 15;
  int gens_size() const;
  private:
  int _internal_gens_size() const;
  public:
  void clear_gens();
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_gens(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      _internal_gens() const;
  void _internal_add_gens(::PROTOBUF_NAMESPACE_ID::int32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      _internal_mutable_gens();
  public:
  ::PROTOBUF_NAMESPACE_ID::int32 gens(int index) const;
  void set_gens(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_gens(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      gens() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_gens();

  // string name = 1;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string path = 10;
  void clear_path();
  const std::string& path() const;
  void set_path(const std::string& value);
  void set_path(std::string&& value);
  void set_path(const char* value);
  void set_path(const char* value, size_t size);
  std::string* mutable_path();
  std::string* release_path();
  void set_allocated_path(std::string* path);
  private:
  const std::string& _internal_path() const;
  void _internal_set_path(const std::string& value);
  std::string* _internal_mutable_path();
  public:

  // bytes data = 11;
  void clear_data();
  const std::string& data() const;
  void set_data(const std::string& value);
  void set_data(std::string&& value);
  void set_data(const char* value);
  void set_data(const void* value, size_t size);
  std::string* mutable_data();
  std::string* release_data();
  void set_allocated_data(std::string* data);
  private:
  const std::string& _internal_data() const;
  void _internal_set_data(const std::string& value);
  std::string* _internal_mutable_data();
  public:

  // string command = 13;
  void clear_command();
  const std::string& command() const;
  void set_command(const std::string& value);
  void set_command(std::string&& value);
  void set_command(const char* value);
  void set_command(const char* value, size_t size);
  std::string* mutable_command();
  std::string* release_command();
  void set_allocated_command(std::string* command);
  private:
  const std::string& _internal_command() const;
  void _internal_set_command(const std::string& value);
  std::string* _internal_mutable_command();
  public:

  // .NFS.attributes attr = 2;
  bool has_attr() const;
  private:
  bool _internal_has_attr() const;
  public:
  void clear_attr();
  const ::NFS::attributes& attr() const;
  ::NFS::attributes* release_attr();
  ::NFS::attributes* mutable_attr();
  void set_allocated_attr(::NFS::attributes* attr);
  private:
  const ::NFS::attributes& _internal_attr() const;
  ::NFS::attributes* _internal_mutable_attr();
  public:

  // .NFS.fileInfo fi = 6;
  bool has_fi() const;
  private:
  bool _internal_has_fi() const;
  public:
  void clear_fi();
  const ::NFS::fileInfo& fi() const;
  ::NFS::fileInfo* release_fi();
  ::NFS::fileInfo* mutable_fi();
  void set_allocated_fi(::NFS::fileInfo* fi);
  private:
  const ::NFS::fileInfo& _internal_fi() const;
  ::NFS::fileInfo* _internal_mutable_fi();
  public:

  // int32 todirfh = 3;
  void clear_todirfh();
  ::PROTOBUF_NAMESPACE_ID::int32 todirfh() const;
  void set_todirfh(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_todirfh() const;
  void _internal_set_todirfh(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 fromfh = 4;
  void clear_fromfh();
  ::PROTOBUF_NAMESPACE_ID::int32 fromfh() const;
  void set_fromfh(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_fromfh() const;
  void _internal_set_fromfh(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 fh = 5;
  void clear_fh();
  ::PROTOBUF_NAMESPACE_ID::int32 fh() const;
  void set_fh(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_fh() const;
  void _internal_set_fh(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 size = 7;
  void clear_size();
  ::PROTOBUF_NAMESPACE_ID::int32 size() const;
  void set_size(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_size() const;
  void _internal_set_size(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 offset = 8;
  void clear_offset();
  ::PROTOBUF_NAMESPACE_ID::int32 offset() const;
  void set_offset(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_offset() const;
  void _internal_set_offset(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 dirfh = 9;
  void clear_dirfh();
  ::PROTOBUF_NAMESPACE_ID::int32 dirfh() const;
  void set_dirfh(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_dirfh() const;
  void _internal_set_dirfh(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 isDataSync = 12;
  void clear_isdatasync();
  ::PROTOBUF_NAMESPACE_ID::int32 isdatasync() const;
  void set_isdatasync(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_isdatasync() const;
  void _internal_set_isdatasync(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 gen = 14;
  void clear_gen();
  ::PROTOBUF_NAMESPACE_ID::int32 gen() const;
  void set_gen(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_gen() const;
  void _internal_set_gen(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:NFS.request)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > gens_;
  mutable std::atomic<int> _gens_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr path_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr data_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr command_;
  ::NFS::attributes* attr_;
  ::NFS::fileInfo* fi_;
  ::PROTOBUF_NAMESPACE_ID::int32 todirfh_;
  ::PROTOBUF_NAMESPACE_ID::int32 fromfh_;
  ::PROTOBUF_NAMESPACE_ID::int32 fh_;
  ::PROTOBUF_NAMESPACE_ID::int32 size_;
  ::PROTOBUF_NAMESPACE_ID::int32 offset_;
  ::PROTOBUF_NAMESPACE_ID::int32 dirfh_;
  ::PROTOBUF_NAMESPACE_ID::int32 isdatasync_;
  ::PROTOBUF_NAMESPACE_ID::int32 gen_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_nfs_2eproto;
};
// -------------------------------------------------------------------

class response :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:NFS.response) */ {
 public:
  response();
  virtual ~response();

  response(const response& from);
  response(response&& from) noexcept
    : response() {
    *this = ::std::move(from);
  }

  inline response& operator=(const response& from) {
    CopyFrom(from);
    return *this;
  }
  inline response& operator=(response&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const response& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const response* internal_default_instance() {
    return reinterpret_cast<const response*>(
               &_response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(response& a, response& b) {
    a.Swap(&b);
  }
  inline void Swap(response* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline response* New() const final {
    return CreateMaybeMessage<response>(nullptr);
  }

  response* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<response>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const response& from);
  void MergeFrom(const response& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(response* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "NFS.response";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_nfs_2eproto);
    return ::descriptor_table_nfs_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kObjectsFieldNumber = 8,
    kDataFieldNumber = 5,
    kFiFieldNumber = 4,
    kAttrFieldNumber = 10,
    kSuccessFieldNumber = 2,
    kErrFieldNumber = 3,
    kFhFieldNumber = 1,
    kErnFieldNumber = 6,
    kSizeFieldNumber = 7,
    kStatusFieldNumber = 9,
    kDataSizeFieldNumber = 11,
  };
  // repeated .NFS.directory objects = 8;
  int objects_size() const;
  private:
  int _internal_objects_size() const;
  public:
  void clear_objects();
  ::NFS::directory* mutable_objects(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::NFS::directory >*
      mutable_objects();
  private:
  const ::NFS::directory& _internal_objects(int index) const;
  ::NFS::directory* _internal_add_objects();
  public:
  const ::NFS::directory& objects(int index) const;
  ::NFS::directory* add_objects();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::NFS::directory >&
      objects() const;

  // bytes data = 5;
  void clear_data();
  const std::string& data() const;
  void set_data(const std::string& value);
  void set_data(std::string&& value);
  void set_data(const char* value);
  void set_data(const void* value, size_t size);
  std::string* mutable_data();
  std::string* release_data();
  void set_allocated_data(std::string* data);
  private:
  const std::string& _internal_data() const;
  void _internal_set_data(const std::string& value);
  std::string* _internal_mutable_data();
  public:

  // .NFS.fileInfo fi = 4;
  bool has_fi() const;
  private:
  bool _internal_has_fi() const;
  public:
  void clear_fi();
  const ::NFS::fileInfo& fi() const;
  ::NFS::fileInfo* release_fi();
  ::NFS::fileInfo* mutable_fi();
  void set_allocated_fi(::NFS::fileInfo* fi);
  private:
  const ::NFS::fileInfo& _internal_fi() const;
  ::NFS::fileInfo* _internal_mutable_fi();
  public:

  // .NFS.attributes attr = 10;
  bool has_attr() const;
  private:
  bool _internal_has_attr() const;
  public:
  void clear_attr();
  const ::NFS::attributes& attr() const;
  ::NFS::attributes* release_attr();
  ::NFS::attributes* mutable_attr();
  void set_allocated_attr(::NFS::attributes* attr);
  private:
  const ::NFS::attributes& _internal_attr() const;
  ::NFS::attributes* _internal_mutable_attr();
  public:

  // uint64 success = 2;
  void clear_success();
  ::PROTOBUF_NAMESPACE_ID::uint64 success() const;
  void set_success(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_success() const;
  void _internal_set_success(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 err = 3;
  void clear_err();
  ::PROTOBUF_NAMESPACE_ID::uint64 err() const;
  void set_err(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_err() const;
  void _internal_set_err(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // int32 fh = 1;
  void clear_fh();
  ::PROTOBUF_NAMESPACE_ID::int32 fh() const;
  void set_fh(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_fh() const;
  void _internal_set_fh(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 ern = 6;
  void clear_ern();
  ::PROTOBUF_NAMESPACE_ID::int32 ern() const;
  void set_ern(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_ern() const;
  void _internal_set_ern(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 size = 7;
  void clear_size();
  ::PROTOBUF_NAMESPACE_ID::int32 size() const;
  void set_size(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_size() const;
  void _internal_set_size(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 status = 9;
  void clear_status();
  ::PROTOBUF_NAMESPACE_ID::int32 status() const;
  void set_status(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_status() const;
  void _internal_set_status(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 dataSize = 11;
  void clear_datasize();
  ::PROTOBUF_NAMESPACE_ID::int32 datasize() const;
  void set_datasize(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_datasize() const;
  void _internal_set_datasize(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:NFS.response)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::NFS::directory > objects_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr data_;
  ::NFS::fileInfo* fi_;
  ::NFS::attributes* attr_;
  ::PROTOBUF_NAMESPACE_ID::uint64 success_;
  ::PROTOBUF_NAMESPACE_ID::uint64 err_;
  ::PROTOBUF_NAMESPACE_ID::int32 fh_;
  ::PROTOBUF_NAMESPACE_ID::int32 ern_;
  ::PROTOBUF_NAMESPACE_ID::int32 size_;
  ::PROTOBUF_NAMESPACE_ID::int32 status_;
  ::PROTOBUF_NAMESPACE_ID::int32 datasize_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_nfs_2eproto;
};
// -------------------------------------------------------------------

class attributes :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:NFS.attributes) */ {
 public:
  attributes();
  virtual ~attributes();

  attributes(const attributes& from);
  attributes(attributes&& from) noexcept
    : attributes() {
    *this = ::std::move(from);
  }

  inline attributes& operator=(const attributes& from) {
    CopyFrom(from);
    return *this;
  }
  inline attributes& operator=(attributes&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const attributes& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const attributes* internal_default_instance() {
    return reinterpret_cast<const attributes*>(
               &_attributes_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(attributes& a, attributes& b) {
    a.Swap(&b);
  }
  inline void Swap(attributes* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline attributes* New() const final {
    return CreateMaybeMessage<attributes>(nullptr);
  }

  attributes* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<attributes>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const attributes& from);
  void MergeFrom(const attributes& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(attributes* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "NFS.attributes";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_nfs_2eproto);
    return ::descriptor_table_nfs_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStDevFieldNumber = 1,
    kStInoFieldNumber = 2,
    kStModeFieldNumber = 3,
    kStNlinkFieldNumber = 4,
    kStUidFieldNumber = 5,
    kStGidFieldNumber = 6,
    kStRdevFieldNumber = 7,
    kStSizeFieldNumber = 8,
    kStCatimeFieldNumber = 9,
    kStCmtimeFieldNumber = 10,
    kStCctimeFieldNumber = 11,
    kStBlksizeFieldNumber = 12,
    kStBlocksFieldNumber = 13,
    kStAttrFieldNumber = 14,
  };
  // uint64 st_dev = 1;
  void clear_st_dev();
  ::PROTOBUF_NAMESPACE_ID::uint64 st_dev() const;
  void set_st_dev(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_st_dev() const;
  void _internal_set_st_dev(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 st_ino = 2;
  void clear_st_ino();
  ::PROTOBUF_NAMESPACE_ID::uint64 st_ino() const;
  void set_st_ino(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_st_ino() const;
  void _internal_set_st_ino(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 st_mode = 3;
  void clear_st_mode();
  ::PROTOBUF_NAMESPACE_ID::uint64 st_mode() const;
  void set_st_mode(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_st_mode() const;
  void _internal_set_st_mode(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 st_nlink = 4;
  void clear_st_nlink();
  ::PROTOBUF_NAMESPACE_ID::uint64 st_nlink() const;
  void set_st_nlink(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_st_nlink() const;
  void _internal_set_st_nlink(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 st_uid = 5;
  void clear_st_uid();
  ::PROTOBUF_NAMESPACE_ID::uint64 st_uid() const;
  void set_st_uid(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_st_uid() const;
  void _internal_set_st_uid(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 st_gid = 6;
  void clear_st_gid();
  ::PROTOBUF_NAMESPACE_ID::uint64 st_gid() const;
  void set_st_gid(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_st_gid() const;
  void _internal_set_st_gid(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 st_rdev = 7;
  void clear_st_rdev();
  ::PROTOBUF_NAMESPACE_ID::uint64 st_rdev() const;
  void set_st_rdev(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_st_rdev() const;
  void _internal_set_st_rdev(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 st_size = 8;
  void clear_st_size();
  ::PROTOBUF_NAMESPACE_ID::uint64 st_size() const;
  void set_st_size(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_st_size() const;
  void _internal_set_st_size(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 st_catime = 9;
  void clear_st_catime();
  ::PROTOBUF_NAMESPACE_ID::uint64 st_catime() const;
  void set_st_catime(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_st_catime() const;
  void _internal_set_st_catime(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 st_cmtime = 10;
  void clear_st_cmtime();
  ::PROTOBUF_NAMESPACE_ID::uint64 st_cmtime() const;
  void set_st_cmtime(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_st_cmtime() const;
  void _internal_set_st_cmtime(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 st_cctime = 11;
  void clear_st_cctime();
  ::PROTOBUF_NAMESPACE_ID::uint64 st_cctime() const;
  void set_st_cctime(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_st_cctime() const;
  void _internal_set_st_cctime(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 st_blksize = 12;
  void clear_st_blksize();
  ::PROTOBUF_NAMESPACE_ID::uint64 st_blksize() const;
  void set_st_blksize(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_st_blksize() const;
  void _internal_set_st_blksize(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 st_blocks = 13;
  void clear_st_blocks();
  ::PROTOBUF_NAMESPACE_ID::uint64 st_blocks() const;
  void set_st_blocks(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_st_blocks() const;
  void _internal_set_st_blocks(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 st_attr = 14;
  void clear_st_attr();
  ::PROTOBUF_NAMESPACE_ID::uint64 st_attr() const;
  void set_st_attr(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_st_attr() const;
  void _internal_set_st_attr(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:NFS.attributes)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::uint64 st_dev_;
  ::PROTOBUF_NAMESPACE_ID::uint64 st_ino_;
  ::PROTOBUF_NAMESPACE_ID::uint64 st_mode_;
  ::PROTOBUF_NAMESPACE_ID::uint64 st_nlink_;
  ::PROTOBUF_NAMESPACE_ID::uint64 st_uid_;
  ::PROTOBUF_NAMESPACE_ID::uint64 st_gid_;
  ::PROTOBUF_NAMESPACE_ID::uint64 st_rdev_;
  ::PROTOBUF_NAMESPACE_ID::uint64 st_size_;
  ::PROTOBUF_NAMESPACE_ID::uint64 st_catime_;
  ::PROTOBUF_NAMESPACE_ID::uint64 st_cmtime_;
  ::PROTOBUF_NAMESPACE_ID::uint64 st_cctime_;
  ::PROTOBUF_NAMESPACE_ID::uint64 st_blksize_;
  ::PROTOBUF_NAMESPACE_ID::uint64 st_blocks_;
  ::PROTOBUF_NAMESPACE_ID::uint64 st_attr_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_nfs_2eproto;
};
// -------------------------------------------------------------------

class fileInfo :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:NFS.fileInfo) */ {
 public:
  fileInfo();
  virtual ~fileInfo();

  fileInfo(const fileInfo& from);
  fileInfo(fileInfo&& from) noexcept
    : fileInfo() {
    *this = ::std::move(from);
  }

  inline fileInfo& operator=(const fileInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline fileInfo& operator=(fileInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const fileInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const fileInfo* internal_default_instance() {
    return reinterpret_cast<const fileInfo*>(
               &_fileInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(fileInfo& a, fileInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(fileInfo* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline fileInfo* New() const final {
    return CreateMaybeMessage<fileInfo>(nullptr);
  }

  fileInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<fileInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const fileInfo& from);
  void MergeFrom(const fileInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(fileInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "NFS.fileInfo";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_nfs_2eproto);
    return ::descriptor_table_nfs_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFhFieldNumber = 1,
    kFlagsFieldNumber = 2,
  };
  // uint64 fh = 1;
  void clear_fh();
  ::PROTOBUF_NAMESPACE_ID::uint64 fh() const;
  void set_fh(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_fh() const;
  void _internal_set_fh(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint32 flags = 2;
  void clear_flags();
  ::PROTOBUF_NAMESPACE_ID::uint32 flags() const;
  void set_flags(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_flags() const;
  void _internal_set_flags(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:NFS.fileInfo)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::uint64 fh_;
  ::PROTOBUF_NAMESPACE_ID::uint32 flags_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_nfs_2eproto;
};
// -------------------------------------------------------------------

class directory :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:NFS.directory) */ {
 public:
  directory();
  virtual ~directory();

  directory(const directory& from);
  directory(directory&& from) noexcept
    : directory() {
    *this = ::std::move(from);
  }

  inline directory& operator=(const directory& from) {
    CopyFrom(from);
    return *this;
  }
  inline directory& operator=(directory&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const directory& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const directory* internal_default_instance() {
    return reinterpret_cast<const directory*>(
               &_directory_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(directory& a, directory& b) {
    a.Swap(&b);
  }
  inline void Swap(directory* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline directory* New() const final {
    return CreateMaybeMessage<directory>(nullptr);
  }

  directory* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<directory>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const directory& from);
  void MergeFrom(const directory& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(directory* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "NFS.directory";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_nfs_2eproto);
    return ::descriptor_table_nfs_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kAttrFieldNumber = 2,
  };
  // string name = 1;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // .NFS.attributes attr = 2;
  bool has_attr() const;
  private:
  bool _internal_has_attr() const;
  public:
  void clear_attr();
  const ::NFS::attributes& attr() const;
  ::NFS::attributes* release_attr();
  ::NFS::attributes* mutable_attr();
  void set_allocated_attr(::NFS::attributes* attr);
  private:
  const ::NFS::attributes& _internal_attr() const;
  ::NFS::attributes* _internal_mutable_attr();
  public:

  // @@protoc_insertion_point(class_scope:NFS.directory)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::NFS::attributes* attr_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_nfs_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// request

// string name = 1;
inline void request::clear_name() {
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& request::name() const {
  // @@protoc_insertion_point(field_get:NFS.request.name)
  return _internal_name();
}
inline void request::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:NFS.request.name)
}
inline std::string* request::mutable_name() {
  // @@protoc_insertion_point(field_mutable:NFS.request.name)
  return _internal_mutable_name();
}
inline const std::string& request::_internal_name() const {
  return name_.GetNoArena();
}
inline void request::_internal_set_name(const std::string& value) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void request::set_name(std::string&& value) {
  
  name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:NFS.request.name)
}
inline void request::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NFS.request.name)
}
inline void request::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NFS.request.name)
}
inline std::string* request::_internal_mutable_name() {
  
  return name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* request::release_name() {
  // @@protoc_insertion_point(field_release:NFS.request.name)
  
  return name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void request::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:NFS.request.name)
}

// .NFS.attributes attr = 2;
inline bool request::_internal_has_attr() const {
  return this != internal_default_instance() && attr_ != nullptr;
}
inline bool request::has_attr() const {
  return _internal_has_attr();
}
inline void request::clear_attr() {
  if (GetArenaNoVirtual() == nullptr && attr_ != nullptr) {
    delete attr_;
  }
  attr_ = nullptr;
}
inline const ::NFS::attributes& request::_internal_attr() const {
  const ::NFS::attributes* p = attr_;
  return p != nullptr ? *p : *reinterpret_cast<const ::NFS::attributes*>(
      &::NFS::_attributes_default_instance_);
}
inline const ::NFS::attributes& request::attr() const {
  // @@protoc_insertion_point(field_get:NFS.request.attr)
  return _internal_attr();
}
inline ::NFS::attributes* request::release_attr() {
  // @@protoc_insertion_point(field_release:NFS.request.attr)
  
  ::NFS::attributes* temp = attr_;
  attr_ = nullptr;
  return temp;
}
inline ::NFS::attributes* request::_internal_mutable_attr() {
  
  if (attr_ == nullptr) {
    auto* p = CreateMaybeMessage<::NFS::attributes>(GetArenaNoVirtual());
    attr_ = p;
  }
  return attr_;
}
inline ::NFS::attributes* request::mutable_attr() {
  // @@protoc_insertion_point(field_mutable:NFS.request.attr)
  return _internal_mutable_attr();
}
inline void request::set_allocated_attr(::NFS::attributes* attr) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete attr_;
  }
  if (attr) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      attr = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, attr, submessage_arena);
    }
    
  } else {
    
  }
  attr_ = attr;
  // @@protoc_insertion_point(field_set_allocated:NFS.request.attr)
}

// int32 todirfh = 3;
inline void request::clear_todirfh() {
  todirfh_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 request::_internal_todirfh() const {
  return todirfh_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 request::todirfh() const {
  // @@protoc_insertion_point(field_get:NFS.request.todirfh)
  return _internal_todirfh();
}
inline void request::_internal_set_todirfh(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  todirfh_ = value;
}
inline void request::set_todirfh(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_todirfh(value);
  // @@protoc_insertion_point(field_set:NFS.request.todirfh)
}

// int32 fromfh = 4;
inline void request::clear_fromfh() {
  fromfh_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 request::_internal_fromfh() const {
  return fromfh_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 request::fromfh() const {
  // @@protoc_insertion_point(field_get:NFS.request.fromfh)
  return _internal_fromfh();
}
inline void request::_internal_set_fromfh(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  fromfh_ = value;
}
inline void request::set_fromfh(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_fromfh(value);
  // @@protoc_insertion_point(field_set:NFS.request.fromfh)
}

// int32 fh = 5;
inline void request::clear_fh() {
  fh_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 request::_internal_fh() const {
  return fh_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 request::fh() const {
  // @@protoc_insertion_point(field_get:NFS.request.fh)
  return _internal_fh();
}
inline void request::_internal_set_fh(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  fh_ = value;
}
inline void request::set_fh(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_fh(value);
  // @@protoc_insertion_point(field_set:NFS.request.fh)
}

// .NFS.fileInfo fi = 6;
inline bool request::_internal_has_fi() const {
  return this != internal_default_instance() && fi_ != nullptr;
}
inline bool request::has_fi() const {
  return _internal_has_fi();
}
inline void request::clear_fi() {
  if (GetArenaNoVirtual() == nullptr && fi_ != nullptr) {
    delete fi_;
  }
  fi_ = nullptr;
}
inline const ::NFS::fileInfo& request::_internal_fi() const {
  const ::NFS::fileInfo* p = fi_;
  return p != nullptr ? *p : *reinterpret_cast<const ::NFS::fileInfo*>(
      &::NFS::_fileInfo_default_instance_);
}
inline const ::NFS::fileInfo& request::fi() const {
  // @@protoc_insertion_point(field_get:NFS.request.fi)
  return _internal_fi();
}
inline ::NFS::fileInfo* request::release_fi() {
  // @@protoc_insertion_point(field_release:NFS.request.fi)
  
  ::NFS::fileInfo* temp = fi_;
  fi_ = nullptr;
  return temp;
}
inline ::NFS::fileInfo* request::_internal_mutable_fi() {
  
  if (fi_ == nullptr) {
    auto* p = CreateMaybeMessage<::NFS::fileInfo>(GetArenaNoVirtual());
    fi_ = p;
  }
  return fi_;
}
inline ::NFS::fileInfo* request::mutable_fi() {
  // @@protoc_insertion_point(field_mutable:NFS.request.fi)
  return _internal_mutable_fi();
}
inline void request::set_allocated_fi(::NFS::fileInfo* fi) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete fi_;
  }
  if (fi) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      fi = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, fi, submessage_arena);
    }
    
  } else {
    
  }
  fi_ = fi;
  // @@protoc_insertion_point(field_set_allocated:NFS.request.fi)
}

// int32 size = 7;
inline void request::clear_size() {
  size_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 request::_internal_size() const {
  return size_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 request::size() const {
  // @@protoc_insertion_point(field_get:NFS.request.size)
  return _internal_size();
}
inline void request::_internal_set_size(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  size_ = value;
}
inline void request::set_size(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_size(value);
  // @@protoc_insertion_point(field_set:NFS.request.size)
}

// int32 offset = 8;
inline void request::clear_offset() {
  offset_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 request::_internal_offset() const {
  return offset_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 request::offset() const {
  // @@protoc_insertion_point(field_get:NFS.request.offset)
  return _internal_offset();
}
inline void request::_internal_set_offset(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  offset_ = value;
}
inline void request::set_offset(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_offset(value);
  // @@protoc_insertion_point(field_set:NFS.request.offset)
}

// int32 dirfh = 9;
inline void request::clear_dirfh() {
  dirfh_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 request::_internal_dirfh() const {
  return dirfh_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 request::dirfh() const {
  // @@protoc_insertion_point(field_get:NFS.request.dirfh)
  return _internal_dirfh();
}
inline void request::_internal_set_dirfh(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  dirfh_ = value;
}
inline void request::set_dirfh(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_dirfh(value);
  // @@protoc_insertion_point(field_set:NFS.request.dirfh)
}

// string path = 10;
inline void request::clear_path() {
  path_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& request::path() const {
  // @@protoc_insertion_point(field_get:NFS.request.path)
  return _internal_path();
}
inline void request::set_path(const std::string& value) {
  _internal_set_path(value);
  // @@protoc_insertion_point(field_set:NFS.request.path)
}
inline std::string* request::mutable_path() {
  // @@protoc_insertion_point(field_mutable:NFS.request.path)
  return _internal_mutable_path();
}
inline const std::string& request::_internal_path() const {
  return path_.GetNoArena();
}
inline void request::_internal_set_path(const std::string& value) {
  
  path_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void request::set_path(std::string&& value) {
  
  path_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:NFS.request.path)
}
inline void request::set_path(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  path_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NFS.request.path)
}
inline void request::set_path(const char* value, size_t size) {
  
  path_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NFS.request.path)
}
inline std::string* request::_internal_mutable_path() {
  
  return path_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* request::release_path() {
  // @@protoc_insertion_point(field_release:NFS.request.path)
  
  return path_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void request::set_allocated_path(std::string* path) {
  if (path != nullptr) {
    
  } else {
    
  }
  path_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), path);
  // @@protoc_insertion_point(field_set_allocated:NFS.request.path)
}

// bytes data = 11;
inline void request::clear_data() {
  data_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& request::data() const {
  // @@protoc_insertion_point(field_get:NFS.request.data)
  return _internal_data();
}
inline void request::set_data(const std::string& value) {
  _internal_set_data(value);
  // @@protoc_insertion_point(field_set:NFS.request.data)
}
inline std::string* request::mutable_data() {
  // @@protoc_insertion_point(field_mutable:NFS.request.data)
  return _internal_mutable_data();
}
inline const std::string& request::_internal_data() const {
  return data_.GetNoArena();
}
inline void request::_internal_set_data(const std::string& value) {
  
  data_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void request::set_data(std::string&& value) {
  
  data_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:NFS.request.data)
}
inline void request::set_data(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  data_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NFS.request.data)
}
inline void request::set_data(const void* value, size_t size) {
  
  data_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NFS.request.data)
}
inline std::string* request::_internal_mutable_data() {
  
  return data_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* request::release_data() {
  // @@protoc_insertion_point(field_release:NFS.request.data)
  
  return data_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void request::set_allocated_data(std::string* data) {
  if (data != nullptr) {
    
  } else {
    
  }
  data_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), data);
  // @@protoc_insertion_point(field_set_allocated:NFS.request.data)
}

// int32 isDataSync = 12;
inline void request::clear_isdatasync() {
  isdatasync_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 request::_internal_isdatasync() const {
  return isdatasync_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 request::isdatasync() const {
  // @@protoc_insertion_point(field_get:NFS.request.isDataSync)
  return _internal_isdatasync();
}
inline void request::_internal_set_isdatasync(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  isdatasync_ = value;
}
inline void request::set_isdatasync(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_isdatasync(value);
  // @@protoc_insertion_point(field_set:NFS.request.isDataSync)
}

// string command = 13;
inline void request::clear_command() {
  command_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& request::command() const {
  // @@protoc_insertion_point(field_get:NFS.request.command)
  return _internal_command();
}
inline void request::set_command(const std::string& value) {
  _internal_set_command(value);
  // @@protoc_insertion_point(field_set:NFS.request.command)
}
inline std::string* request::mutable_command() {
  // @@protoc_insertion_point(field_mutable:NFS.request.command)
  return _internal_mutable_command();
}
inline const std::string& request::_internal_command() const {
  return command_.GetNoArena();
}
inline void request::_internal_set_command(const std::string& value) {
  
  command_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void request::set_command(std::string&& value) {
  
  command_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:NFS.request.command)
}
inline void request::set_command(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  command_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NFS.request.command)
}
inline void request::set_command(const char* value, size_t size) {
  
  command_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NFS.request.command)
}
inline std::string* request::_internal_mutable_command() {
  
  return command_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* request::release_command() {
  // @@protoc_insertion_point(field_release:NFS.request.command)
  
  return command_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void request::set_allocated_command(std::string* command) {
  if (command != nullptr) {
    
  } else {
    
  }
  command_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), command);
  // @@protoc_insertion_point(field_set_allocated:NFS.request.command)
}

// int32 gen = 14;
inline void request::clear_gen() {
  gen_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 request::_internal_gen() const {
  return gen_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 request::gen() const {
  // @@protoc_insertion_point(field_get:NFS.request.gen)
  return _internal_gen();
}
inline void request::_internal_set_gen(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  gen_ = value;
}
inline void request::set_gen(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_gen(value);
  // @@protoc_insertion_point(field_set:NFS.request.gen)
}

// repeated int32 gens = 15;
inline int request::_internal_gens_size() const {
  return gens_.size();
}
inline int request::gens_size() const {
  return _internal_gens_size();
}
inline void request::clear_gens() {
  gens_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 request::_internal_gens(int index) const {
  return gens_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int32 request::gens(int index) const {
  // @@protoc_insertion_point(field_get:NFS.request.gens)
  return _internal_gens(index);
}
inline void request::set_gens(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  gens_.Set(index, value);
  // @@protoc_insertion_point(field_set:NFS.request.gens)
}
inline void request::_internal_add_gens(::PROTOBUF_NAMESPACE_ID::int32 value) {
  gens_.Add(value);
}
inline void request::add_gens(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_add_gens(value);
  // @@protoc_insertion_point(field_add:NFS.request.gens)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
request::_internal_gens() const {
  return gens_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
request::gens() const {
  // @@protoc_insertion_point(field_list:NFS.request.gens)
  return _internal_gens();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
request::_internal_mutable_gens() {
  return &gens_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
request::mutable_gens() {
  // @@protoc_insertion_point(field_mutable_list:NFS.request.gens)
  return _internal_mutable_gens();
}

// -------------------------------------------------------------------

// response

// int32 fh = 1;
inline void response::clear_fh() {
  fh_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 response::_internal_fh() const {
  return fh_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 response::fh() const {
  // @@protoc_insertion_point(field_get:NFS.response.fh)
  return _internal_fh();
}
inline void response::_internal_set_fh(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  fh_ = value;
}
inline void response::set_fh(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_fh(value);
  // @@protoc_insertion_point(field_set:NFS.response.fh)
}

// uint64 success = 2;
inline void response::clear_success() {
  success_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 response::_internal_success() const {
  return success_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 response::success() const {
  // @@protoc_insertion_point(field_get:NFS.response.success)
  return _internal_success();
}
inline void response::_internal_set_success(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  success_ = value;
}
inline void response::set_success(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_success(value);
  // @@protoc_insertion_point(field_set:NFS.response.success)
}

// uint64 err = 3;
inline void response::clear_err() {
  err_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 response::_internal_err() const {
  return err_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 response::err() const {
  // @@protoc_insertion_point(field_get:NFS.response.err)
  return _internal_err();
}
inline void response::_internal_set_err(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  err_ = value;
}
inline void response::set_err(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_err(value);
  // @@protoc_insertion_point(field_set:NFS.response.err)
}

// .NFS.fileInfo fi = 4;
inline bool response::_internal_has_fi() const {
  return this != internal_default_instance() && fi_ != nullptr;
}
inline bool response::has_fi() const {
  return _internal_has_fi();
}
inline void response::clear_fi() {
  if (GetArenaNoVirtual() == nullptr && fi_ != nullptr) {
    delete fi_;
  }
  fi_ = nullptr;
}
inline const ::NFS::fileInfo& response::_internal_fi() const {
  const ::NFS::fileInfo* p = fi_;
  return p != nullptr ? *p : *reinterpret_cast<const ::NFS::fileInfo*>(
      &::NFS::_fileInfo_default_instance_);
}
inline const ::NFS::fileInfo& response::fi() const {
  // @@protoc_insertion_point(field_get:NFS.response.fi)
  return _internal_fi();
}
inline ::NFS::fileInfo* response::release_fi() {
  // @@protoc_insertion_point(field_release:NFS.response.fi)
  
  ::NFS::fileInfo* temp = fi_;
  fi_ = nullptr;
  return temp;
}
inline ::NFS::fileInfo* response::_internal_mutable_fi() {
  
  if (fi_ == nullptr) {
    auto* p = CreateMaybeMessage<::NFS::fileInfo>(GetArenaNoVirtual());
    fi_ = p;
  }
  return fi_;
}
inline ::NFS::fileInfo* response::mutable_fi() {
  // @@protoc_insertion_point(field_mutable:NFS.response.fi)
  return _internal_mutable_fi();
}
inline void response::set_allocated_fi(::NFS::fileInfo* fi) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete fi_;
  }
  if (fi) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      fi = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, fi, submessage_arena);
    }
    
  } else {
    
  }
  fi_ = fi;
  // @@protoc_insertion_point(field_set_allocated:NFS.response.fi)
}

// bytes data = 5;
inline void response::clear_data() {
  data_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& response::data() const {
  // @@protoc_insertion_point(field_get:NFS.response.data)
  return _internal_data();
}
inline void response::set_data(const std::string& value) {
  _internal_set_data(value);
  // @@protoc_insertion_point(field_set:NFS.response.data)
}
inline std::string* response::mutable_data() {
  // @@protoc_insertion_point(field_mutable:NFS.response.data)
  return _internal_mutable_data();
}
inline const std::string& response::_internal_data() const {
  return data_.GetNoArena();
}
inline void response::_internal_set_data(const std::string& value) {
  
  data_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void response::set_data(std::string&& value) {
  
  data_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:NFS.response.data)
}
inline void response::set_data(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  data_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NFS.response.data)
}
inline void response::set_data(const void* value, size_t size) {
  
  data_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NFS.response.data)
}
inline std::string* response::_internal_mutable_data() {
  
  return data_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* response::release_data() {
  // @@protoc_insertion_point(field_release:NFS.response.data)
  
  return data_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void response::set_allocated_data(std::string* data) {
  if (data != nullptr) {
    
  } else {
    
  }
  data_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), data);
  // @@protoc_insertion_point(field_set_allocated:NFS.response.data)
}

// int32 ern = 6;
inline void response::clear_ern() {
  ern_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 response::_internal_ern() const {
  return ern_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 response::ern() const {
  // @@protoc_insertion_point(field_get:NFS.response.ern)
  return _internal_ern();
}
inline void response::_internal_set_ern(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  ern_ = value;
}
inline void response::set_ern(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_ern(value);
  // @@protoc_insertion_point(field_set:NFS.response.ern)
}

// int32 size = 7;
inline void response::clear_size() {
  size_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 response::_internal_size() const {
  return size_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 response::size() const {
  // @@protoc_insertion_point(field_get:NFS.response.size)
  return _internal_size();
}
inline void response::_internal_set_size(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  size_ = value;
}
inline void response::set_size(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_size(value);
  // @@protoc_insertion_point(field_set:NFS.response.size)
}

// repeated .NFS.directory objects = 8;
inline int response::_internal_objects_size() const {
  return objects_.size();
}
inline int response::objects_size() const {
  return _internal_objects_size();
}
inline void response::clear_objects() {
  objects_.Clear();
}
inline ::NFS::directory* response::mutable_objects(int index) {
  // @@protoc_insertion_point(field_mutable:NFS.response.objects)
  return objects_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::NFS::directory >*
response::mutable_objects() {
  // @@protoc_insertion_point(field_mutable_list:NFS.response.objects)
  return &objects_;
}
inline const ::NFS::directory& response::_internal_objects(int index) const {
  return objects_.Get(index);
}
inline const ::NFS::directory& response::objects(int index) const {
  // @@protoc_insertion_point(field_get:NFS.response.objects)
  return _internal_objects(index);
}
inline ::NFS::directory* response::_internal_add_objects() {
  return objects_.Add();
}
inline ::NFS::directory* response::add_objects() {
  // @@protoc_insertion_point(field_add:NFS.response.objects)
  return _internal_add_objects();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::NFS::directory >&
response::objects() const {
  // @@protoc_insertion_point(field_list:NFS.response.objects)
  return objects_;
}

// int32 status = 9;
inline void response::clear_status() {
  status_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 response::_internal_status() const {
  return status_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 response::status() const {
  // @@protoc_insertion_point(field_get:NFS.response.status)
  return _internal_status();
}
inline void response::_internal_set_status(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  status_ = value;
}
inline void response::set_status(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:NFS.response.status)
}

// .NFS.attributes attr = 10;
inline bool response::_internal_has_attr() const {
  return this != internal_default_instance() && attr_ != nullptr;
}
inline bool response::has_attr() const {
  return _internal_has_attr();
}
inline void response::clear_attr() {
  if (GetArenaNoVirtual() == nullptr && attr_ != nullptr) {
    delete attr_;
  }
  attr_ = nullptr;
}
inline const ::NFS::attributes& response::_internal_attr() const {
  const ::NFS::attributes* p = attr_;
  return p != nullptr ? *p : *reinterpret_cast<const ::NFS::attributes*>(
      &::NFS::_attributes_default_instance_);
}
inline const ::NFS::attributes& response::attr() const {
  // @@protoc_insertion_point(field_get:NFS.response.attr)
  return _internal_attr();
}
inline ::NFS::attributes* response::release_attr() {
  // @@protoc_insertion_point(field_release:NFS.response.attr)
  
  ::NFS::attributes* temp = attr_;
  attr_ = nullptr;
  return temp;
}
inline ::NFS::attributes* response::_internal_mutable_attr() {
  
  if (attr_ == nullptr) {
    auto* p = CreateMaybeMessage<::NFS::attributes>(GetArenaNoVirtual());
    attr_ = p;
  }
  return attr_;
}
inline ::NFS::attributes* response::mutable_attr() {
  // @@protoc_insertion_point(field_mutable:NFS.response.attr)
  return _internal_mutable_attr();
}
inline void response::set_allocated_attr(::NFS::attributes* attr) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete attr_;
  }
  if (attr) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      attr = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, attr, submessage_arena);
    }
    
  } else {
    
  }
  attr_ = attr;
  // @@protoc_insertion_point(field_set_allocated:NFS.response.attr)
}

// int32 dataSize = 11;
inline void response::clear_datasize() {
  datasize_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 response::_internal_datasize() const {
  return datasize_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 response::datasize() const {
  // @@protoc_insertion_point(field_get:NFS.response.dataSize)
  return _internal_datasize();
}
inline void response::_internal_set_datasize(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  datasize_ = value;
}
inline void response::set_datasize(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_datasize(value);
  // @@protoc_insertion_point(field_set:NFS.response.dataSize)
}

// -------------------------------------------------------------------

// attributes

// uint64 st_dev = 1;
inline void attributes::clear_st_dev() {
  st_dev_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 attributes::_internal_st_dev() const {
  return st_dev_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 attributes::st_dev() const {
  // @@protoc_insertion_point(field_get:NFS.attributes.st_dev)
  return _internal_st_dev();
}
inline void attributes::_internal_set_st_dev(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  st_dev_ = value;
}
inline void attributes::set_st_dev(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_st_dev(value);
  // @@protoc_insertion_point(field_set:NFS.attributes.st_dev)
}

// uint64 st_ino = 2;
inline void attributes::clear_st_ino() {
  st_ino_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 attributes::_internal_st_ino() const {
  return st_ino_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 attributes::st_ino() const {
  // @@protoc_insertion_point(field_get:NFS.attributes.st_ino)
  return _internal_st_ino();
}
inline void attributes::_internal_set_st_ino(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  st_ino_ = value;
}
inline void attributes::set_st_ino(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_st_ino(value);
  // @@protoc_insertion_point(field_set:NFS.attributes.st_ino)
}

// uint64 st_mode = 3;
inline void attributes::clear_st_mode() {
  st_mode_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 attributes::_internal_st_mode() const {
  return st_mode_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 attributes::st_mode() const {
  // @@protoc_insertion_point(field_get:NFS.attributes.st_mode)
  return _internal_st_mode();
}
inline void attributes::_internal_set_st_mode(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  st_mode_ = value;
}
inline void attributes::set_st_mode(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_st_mode(value);
  // @@protoc_insertion_point(field_set:NFS.attributes.st_mode)
}

// uint64 st_nlink = 4;
inline void attributes::clear_st_nlink() {
  st_nlink_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 attributes::_internal_st_nlink() const {
  return st_nlink_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 attributes::st_nlink() const {
  // @@protoc_insertion_point(field_get:NFS.attributes.st_nlink)
  return _internal_st_nlink();
}
inline void attributes::_internal_set_st_nlink(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  st_nlink_ = value;
}
inline void attributes::set_st_nlink(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_st_nlink(value);
  // @@protoc_insertion_point(field_set:NFS.attributes.st_nlink)
}

// uint64 st_uid = 5;
inline void attributes::clear_st_uid() {
  st_uid_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 attributes::_internal_st_uid() const {
  return st_uid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 attributes::st_uid() const {
  // @@protoc_insertion_point(field_get:NFS.attributes.st_uid)
  return _internal_st_uid();
}
inline void attributes::_internal_set_st_uid(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  st_uid_ = value;
}
inline void attributes::set_st_uid(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_st_uid(value);
  // @@protoc_insertion_point(field_set:NFS.attributes.st_uid)
}

// uint64 st_gid = 6;
inline void attributes::clear_st_gid() {
  st_gid_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 attributes::_internal_st_gid() const {
  return st_gid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 attributes::st_gid() const {
  // @@protoc_insertion_point(field_get:NFS.attributes.st_gid)
  return _internal_st_gid();
}
inline void attributes::_internal_set_st_gid(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  st_gid_ = value;
}
inline void attributes::set_st_gid(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_st_gid(value);
  // @@protoc_insertion_point(field_set:NFS.attributes.st_gid)
}

// uint64 st_rdev = 7;
inline void attributes::clear_st_rdev() {
  st_rdev_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 attributes::_internal_st_rdev() const {
  return st_rdev_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 attributes::st_rdev() const {
  // @@protoc_insertion_point(field_get:NFS.attributes.st_rdev)
  return _internal_st_rdev();
}
inline void attributes::_internal_set_st_rdev(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  st_rdev_ = value;
}
inline void attributes::set_st_rdev(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_st_rdev(value);
  // @@protoc_insertion_point(field_set:NFS.attributes.st_rdev)
}

// uint64 st_size = 8;
inline void attributes::clear_st_size() {
  st_size_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 attributes::_internal_st_size() const {
  return st_size_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 attributes::st_size() const {
  // @@protoc_insertion_point(field_get:NFS.attributes.st_size)
  return _internal_st_size();
}
inline void attributes::_internal_set_st_size(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  st_size_ = value;
}
inline void attributes::set_st_size(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_st_size(value);
  // @@protoc_insertion_point(field_set:NFS.attributes.st_size)
}

// uint64 st_catime = 9;
inline void attributes::clear_st_catime() {
  st_catime_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 attributes::_internal_st_catime() const {
  return st_catime_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 attributes::st_catime() const {
  // @@protoc_insertion_point(field_get:NFS.attributes.st_catime)
  return _internal_st_catime();
}
inline void attributes::_internal_set_st_catime(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  st_catime_ = value;
}
inline void attributes::set_st_catime(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_st_catime(value);
  // @@protoc_insertion_point(field_set:NFS.attributes.st_catime)
}

// uint64 st_cmtime = 10;
inline void attributes::clear_st_cmtime() {
  st_cmtime_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 attributes::_internal_st_cmtime() const {
  return st_cmtime_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 attributes::st_cmtime() const {
  // @@protoc_insertion_point(field_get:NFS.attributes.st_cmtime)
  return _internal_st_cmtime();
}
inline void attributes::_internal_set_st_cmtime(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  st_cmtime_ = value;
}
inline void attributes::set_st_cmtime(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_st_cmtime(value);
  // @@protoc_insertion_point(field_set:NFS.attributes.st_cmtime)
}

// uint64 st_cctime = 11;
inline void attributes::clear_st_cctime() {
  st_cctime_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 attributes::_internal_st_cctime() const {
  return st_cctime_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 attributes::st_cctime() const {
  // @@protoc_insertion_point(field_get:NFS.attributes.st_cctime)
  return _internal_st_cctime();
}
inline void attributes::_internal_set_st_cctime(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  st_cctime_ = value;
}
inline void attributes::set_st_cctime(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_st_cctime(value);
  // @@protoc_insertion_point(field_set:NFS.attributes.st_cctime)
}

// uint64 st_blksize = 12;
inline void attributes::clear_st_blksize() {
  st_blksize_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 attributes::_internal_st_blksize() const {
  return st_blksize_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 attributes::st_blksize() const {
  // @@protoc_insertion_point(field_get:NFS.attributes.st_blksize)
  return _internal_st_blksize();
}
inline void attributes::_internal_set_st_blksize(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  st_blksize_ = value;
}
inline void attributes::set_st_blksize(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_st_blksize(value);
  // @@protoc_insertion_point(field_set:NFS.attributes.st_blksize)
}

// uint64 st_blocks = 13;
inline void attributes::clear_st_blocks() {
  st_blocks_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 attributes::_internal_st_blocks() const {
  return st_blocks_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 attributes::st_blocks() const {
  // @@protoc_insertion_point(field_get:NFS.attributes.st_blocks)
  return _internal_st_blocks();
}
inline void attributes::_internal_set_st_blocks(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  st_blocks_ = value;
}
inline void attributes::set_st_blocks(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_st_blocks(value);
  // @@protoc_insertion_point(field_set:NFS.attributes.st_blocks)
}

// uint64 st_attr = 14;
inline void attributes::clear_st_attr() {
  st_attr_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 attributes::_internal_st_attr() const {
  return st_attr_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 attributes::st_attr() const {
  // @@protoc_insertion_point(field_get:NFS.attributes.st_attr)
  return _internal_st_attr();
}
inline void attributes::_internal_set_st_attr(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  st_attr_ = value;
}
inline void attributes::set_st_attr(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_st_attr(value);
  // @@protoc_insertion_point(field_set:NFS.attributes.st_attr)
}

// -------------------------------------------------------------------

// fileInfo

// uint64 fh = 1;
inline void fileInfo::clear_fh() {
  fh_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 fileInfo::_internal_fh() const {
  return fh_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 fileInfo::fh() const {
  // @@protoc_insertion_point(field_get:NFS.fileInfo.fh)
  return _internal_fh();
}
inline void fileInfo::_internal_set_fh(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  fh_ = value;
}
inline void fileInfo::set_fh(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_fh(value);
  // @@protoc_insertion_point(field_set:NFS.fileInfo.fh)
}

// uint32 flags = 2;
inline void fileInfo::clear_flags() {
  flags_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 fileInfo::_internal_flags() const {
  return flags_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 fileInfo::flags() const {
  // @@protoc_insertion_point(field_get:NFS.fileInfo.flags)
  return _internal_flags();
}
inline void fileInfo::_internal_set_flags(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  flags_ = value;
}
inline void fileInfo::set_flags(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_flags(value);
  // @@protoc_insertion_point(field_set:NFS.fileInfo.flags)
}

// -------------------------------------------------------------------

// directory

// string name = 1;
inline void directory::clear_name() {
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& directory::name() const {
  // @@protoc_insertion_point(field_get:NFS.directory.name)
  return _internal_name();
}
inline void directory::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:NFS.directory.name)
}
inline std::string* directory::mutable_name() {
  // @@protoc_insertion_point(field_mutable:NFS.directory.name)
  return _internal_mutable_name();
}
inline const std::string& directory::_internal_name() const {
  return name_.GetNoArena();
}
inline void directory::_internal_set_name(const std::string& value) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void directory::set_name(std::string&& value) {
  
  name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:NFS.directory.name)
}
inline void directory::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NFS.directory.name)
}
inline void directory::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NFS.directory.name)
}
inline std::string* directory::_internal_mutable_name() {
  
  return name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* directory::release_name() {
  // @@protoc_insertion_point(field_release:NFS.directory.name)
  
  return name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void directory::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:NFS.directory.name)
}

// .NFS.attributes attr = 2;
inline bool directory::_internal_has_attr() const {
  return this != internal_default_instance() && attr_ != nullptr;
}
inline bool directory::has_attr() const {
  return _internal_has_attr();
}
inline void directory::clear_attr() {
  if (GetArenaNoVirtual() == nullptr && attr_ != nullptr) {
    delete attr_;
  }
  attr_ = nullptr;
}
inline const ::NFS::attributes& directory::_internal_attr() const {
  const ::NFS::attributes* p = attr_;
  return p != nullptr ? *p : *reinterpret_cast<const ::NFS::attributes*>(
      &::NFS::_attributes_default_instance_);
}
inline const ::NFS::attributes& directory::attr() const {
  // @@protoc_insertion_point(field_get:NFS.directory.attr)
  return _internal_attr();
}
inline ::NFS::attributes* directory::release_attr() {
  // @@protoc_insertion_point(field_release:NFS.directory.attr)
  
  ::NFS::attributes* temp = attr_;
  attr_ = nullptr;
  return temp;
}
inline ::NFS::attributes* directory::_internal_mutable_attr() {
  
  if (attr_ == nullptr) {
    auto* p = CreateMaybeMessage<::NFS::attributes>(GetArenaNoVirtual());
    attr_ = p;
  }
  return attr_;
}
inline ::NFS::attributes* directory::mutable_attr() {
  // @@protoc_insertion_point(field_mutable:NFS.directory.attr)
  return _internal_mutable_attr();
}
inline void directory::set_allocated_attr(::NFS::attributes* attr) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete attr_;
  }
  if (attr) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      attr = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, attr, submessage_arena);
    }
    
  } else {
    
  }
  attr_ = attr;
  // @@protoc_insertion_point(field_set_allocated:NFS.directory.attr)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace NFS

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_nfs_2eproto
