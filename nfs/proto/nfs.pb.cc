// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: nfs.proto

#include "nfs.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_nfs_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_attributes_nfs_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_nfs_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_directory_nfs_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_nfs_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_fileInfo_nfs_2eproto;
namespace NFS {
class requestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<request> _instance;
} _request_default_instance_;
class responseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<response> _instance;
} _response_default_instance_;
class attributesDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<attributes> _instance;
} _attributes_default_instance_;
class fileInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<fileInfo> _instance;
} _fileInfo_default_instance_;
class directoryDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<directory> _instance;
} _directory_default_instance_;
}  // namespace NFS
static void InitDefaultsscc_info_attributes_nfs_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::NFS::_attributes_default_instance_;
    new (ptr) ::NFS::attributes();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::NFS::attributes::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_attributes_nfs_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_attributes_nfs_2eproto}, {}};

static void InitDefaultsscc_info_directory_nfs_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::NFS::_directory_default_instance_;
    new (ptr) ::NFS::directory();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::NFS::directory::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_directory_nfs_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_directory_nfs_2eproto}, {
      &scc_info_attributes_nfs_2eproto.base,}};

static void InitDefaultsscc_info_fileInfo_nfs_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::NFS::_fileInfo_default_instance_;
    new (ptr) ::NFS::fileInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::NFS::fileInfo::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_fileInfo_nfs_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_fileInfo_nfs_2eproto}, {}};

static void InitDefaultsscc_info_request_nfs_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::NFS::_request_default_instance_;
    new (ptr) ::NFS::request();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::NFS::request::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_request_nfs_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_request_nfs_2eproto}, {
      &scc_info_attributes_nfs_2eproto.base,
      &scc_info_fileInfo_nfs_2eproto.base,}};

static void InitDefaultsscc_info_response_nfs_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::NFS::_response_default_instance_;
    new (ptr) ::NFS::response();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::NFS::response::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_response_nfs_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, 0, InitDefaultsscc_info_response_nfs_2eproto}, {
      &scc_info_fileInfo_nfs_2eproto.base,
      &scc_info_directory_nfs_2eproto.base,
      &scc_info_attributes_nfs_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_nfs_2eproto[5];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_nfs_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_nfs_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_nfs_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::NFS::request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::NFS::request, name_),
  PROTOBUF_FIELD_OFFSET(::NFS::request, attr_),
  PROTOBUF_FIELD_OFFSET(::NFS::request, todirfh_),
  PROTOBUF_FIELD_OFFSET(::NFS::request, fromfh_),
  PROTOBUF_FIELD_OFFSET(::NFS::request, fh_),
  PROTOBUF_FIELD_OFFSET(::NFS::request, fi_),
  PROTOBUF_FIELD_OFFSET(::NFS::request, size_),
  PROTOBUF_FIELD_OFFSET(::NFS::request, offset_),
  PROTOBUF_FIELD_OFFSET(::NFS::request, dirfh_),
  PROTOBUF_FIELD_OFFSET(::NFS::request, path_),
  PROTOBUF_FIELD_OFFSET(::NFS::request, data_),
  PROTOBUF_FIELD_OFFSET(::NFS::request, isdatasync_),
  PROTOBUF_FIELD_OFFSET(::NFS::request, command_),
  PROTOBUF_FIELD_OFFSET(::NFS::request, gen_),
  PROTOBUF_FIELD_OFFSET(::NFS::request, gens_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::NFS::response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::NFS::response, fh_),
  PROTOBUF_FIELD_OFFSET(::NFS::response, success_),
  PROTOBUF_FIELD_OFFSET(::NFS::response, err_),
  PROTOBUF_FIELD_OFFSET(::NFS::response, fi_),
  PROTOBUF_FIELD_OFFSET(::NFS::response, data_),
  PROTOBUF_FIELD_OFFSET(::NFS::response, ern_),
  PROTOBUF_FIELD_OFFSET(::NFS::response, size_),
  PROTOBUF_FIELD_OFFSET(::NFS::response, objects_),
  PROTOBUF_FIELD_OFFSET(::NFS::response, status_),
  PROTOBUF_FIELD_OFFSET(::NFS::response, attr_),
  PROTOBUF_FIELD_OFFSET(::NFS::response, datasize_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::NFS::attributes, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::NFS::attributes, st_dev_),
  PROTOBUF_FIELD_OFFSET(::NFS::attributes, st_ino_),
  PROTOBUF_FIELD_OFFSET(::NFS::attributes, st_mode_),
  PROTOBUF_FIELD_OFFSET(::NFS::attributes, st_nlink_),
  PROTOBUF_FIELD_OFFSET(::NFS::attributes, st_uid_),
  PROTOBUF_FIELD_OFFSET(::NFS::attributes, st_gid_),
  PROTOBUF_FIELD_OFFSET(::NFS::attributes, st_rdev_),
  PROTOBUF_FIELD_OFFSET(::NFS::attributes, st_size_),
  PROTOBUF_FIELD_OFFSET(::NFS::attributes, st_catime_),
  PROTOBUF_FIELD_OFFSET(::NFS::attributes, st_cmtime_),
  PROTOBUF_FIELD_OFFSET(::NFS::attributes, st_cctime_),
  PROTOBUF_FIELD_OFFSET(::NFS::attributes, st_blksize_),
  PROTOBUF_FIELD_OFFSET(::NFS::attributes, st_blocks_),
  PROTOBUF_FIELD_OFFSET(::NFS::attributes, st_attr_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::NFS::fileInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::NFS::fileInfo, fh_),
  PROTOBUF_FIELD_OFFSET(::NFS::fileInfo, flags_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::NFS::directory, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::NFS::directory, name_),
  PROTOBUF_FIELD_OFFSET(::NFS::directory, attr_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::NFS::request)},
  { 20, -1, sizeof(::NFS::response)},
  { 36, -1, sizeof(::NFS::attributes)},
  { 55, -1, sizeof(::NFS::fileInfo)},
  { 62, -1, sizeof(::NFS::directory)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::NFS::_request_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::NFS::_response_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::NFS::_attributes_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::NFS::_fileInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::NFS::_directory_default_instance_),
};

const char descriptor_table_protodef_nfs_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\tnfs.proto\022\003NFS\"\207\002\n\007request\022\014\n\004name\030\001 \001"
  "(\t\022\035\n\004attr\030\002 \001(\0132\017.NFS.attributes\022\017\n\007tod"
  "irfh\030\003 \001(\005\022\016\n\006fromfh\030\004 \001(\005\022\n\n\002fh\030\005 \001(\005\022\031"
  "\n\002fi\030\006 \001(\0132\r.NFS.fileInfo\022\014\n\004size\030\007 \001(\005\022"
  "\016\n\006offset\030\010 \001(\005\022\r\n\005dirfh\030\t \001(\005\022\014\n\004path\030\n"
  " \001(\t\022\014\n\004data\030\013 \001(\014\022\022\n\nisDataSync\030\014 \001(\005\022\017"
  "\n\007command\030\r \001(\t\022\013\n\003gen\030\016 \001(\005\022\014\n\004gens\030\017 \003"
  "(\005\"\332\001\n\010response\022\n\n\002fh\030\001 \001(\005\022\017\n\007success\030\002"
  " \001(\004\022\013\n\003err\030\003 \001(\004\022\031\n\002fi\030\004 \001(\0132\r.NFS.file"
  "Info\022\014\n\004data\030\005 \001(\014\022\013\n\003ern\030\006 \001(\005\022\014\n\004size\030"
  "\007 \001(\005\022\037\n\007objects\030\010 \003(\0132\016.NFS.directory\022\016"
  "\n\006status\030\t \001(\005\022\035\n\004attr\030\n \001(\0132\017.NFS.attri"
  "butes\022\020\n\010dataSize\030\013 \001(\005\"\202\002\n\nattributes\022\016"
  "\n\006st_dev\030\001 \001(\004\022\016\n\006st_ino\030\002 \001(\004\022\017\n\007st_mod"
  "e\030\003 \001(\004\022\020\n\010st_nlink\030\004 \001(\004\022\016\n\006st_uid\030\005 \001("
  "\004\022\016\n\006st_gid\030\006 \001(\004\022\017\n\007st_rdev\030\007 \001(\004\022\017\n\007st"
  "_size\030\010 \001(\004\022\021\n\tst_catime\030\t \001(\004\022\021\n\tst_cmt"
  "ime\030\n \001(\004\022\021\n\tst_cctime\030\013 \001(\004\022\022\n\nst_blksi"
  "ze\030\014 \001(\004\022\021\n\tst_blocks\030\r \001(\004\022\017\n\007st_attr\030\016"
  " \001(\004\"%\n\010fileInfo\022\n\n\002fh\030\001 \001(\004\022\r\n\005flags\030\002 "
  "\001(\r\"8\n\tdirectory\022\014\n\004name\030\001 \001(\t\022\035\n\004attr\030\002"
  " \001(\0132\017.NFS.attributes22\n\tnfsServer\022%\n\004ca"
  "ll\022\014.NFS.request\032\r.NFS.response\"\000b\006proto"
  "3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_nfs_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_nfs_2eproto_sccs[5] = {
  &scc_info_attributes_nfs_2eproto.base,
  &scc_info_directory_nfs_2eproto.base,
  &scc_info_fileInfo_nfs_2eproto.base,
  &scc_info_request_nfs_2eproto.base,
  &scc_info_response_nfs_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_nfs_2eproto_once;
static bool descriptor_table_nfs_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_nfs_2eproto = {
  &descriptor_table_nfs_2eproto_initialized, descriptor_table_protodef_nfs_2eproto, "nfs.proto", 921,
  &descriptor_table_nfs_2eproto_once, descriptor_table_nfs_2eproto_sccs, descriptor_table_nfs_2eproto_deps, 5, 0,
  schemas, file_default_instances, TableStruct_nfs_2eproto::offsets,
  file_level_metadata_nfs_2eproto, 5, file_level_enum_descriptors_nfs_2eproto, file_level_service_descriptors_nfs_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_nfs_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_nfs_2eproto), true);
namespace NFS {

// ===================================================================

void request::InitAsDefaultInstance() {
  ::NFS::_request_default_instance_._instance.get_mutable()->attr_ = const_cast< ::NFS::attributes*>(
      ::NFS::attributes::internal_default_instance());
  ::NFS::_request_default_instance_._instance.get_mutable()->fi_ = const_cast< ::NFS::fileInfo*>(
      ::NFS::fileInfo::internal_default_instance());
}
class request::_Internal {
 public:
  static const ::NFS::attributes& attr(const request* msg);
  static const ::NFS::fileInfo& fi(const request* msg);
};

const ::NFS::attributes&
request::_Internal::attr(const request* msg) {
  return *msg->attr_;
}
const ::NFS::fileInfo&
request::_Internal::fi(const request* msg) {
  return *msg->fi_;
}
request::request()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:NFS.request)
}
request::request(const request& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      gens_(from.gens_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  path_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_path().empty()) {
    path_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.path_);
  }
  data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_data().empty()) {
    data_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.data_);
  }
  command_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_command().empty()) {
    command_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.command_);
  }
  if (from._internal_has_attr()) {
    attr_ = new ::NFS::attributes(*from.attr_);
  } else {
    attr_ = nullptr;
  }
  if (from._internal_has_fi()) {
    fi_ = new ::NFS::fileInfo(*from.fi_);
  } else {
    fi_ = nullptr;
  }
  ::memcpy(&todirfh_, &from.todirfh_,
    static_cast<size_t>(reinterpret_cast<char*>(&gen_) -
    reinterpret_cast<char*>(&todirfh_)) + sizeof(gen_));
  // @@protoc_insertion_point(copy_constructor:NFS.request)
}

void request::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_request_nfs_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  path_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  command_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&attr_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&gen_) -
      reinterpret_cast<char*>(&attr_)) + sizeof(gen_));
}

request::~request() {
  // @@protoc_insertion_point(destructor:NFS.request)
  SharedDtor();
}

void request::SharedDtor() {
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  path_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  data_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  command_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete attr_;
  if (this != internal_default_instance()) delete fi_;
}

void request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const request& request::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_request_nfs_2eproto.base);
  return *internal_default_instance();
}


void request::Clear() {
// @@protoc_insertion_point(message_clear_start:NFS.request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  gens_.Clear();
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  path_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  data_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  command_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && attr_ != nullptr) {
    delete attr_;
  }
  attr_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && fi_ != nullptr) {
    delete fi_;
  }
  fi_ = nullptr;
  ::memset(&todirfh_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&gen_) -
      reinterpret_cast<char*>(&todirfh_)) + sizeof(gen_));
  _internal_metadata_.Clear();
}

const char* request::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(_internal_mutable_name(), ptr, ctx, "NFS.request.name");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .NFS.attributes attr = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_attr(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 todirfh = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          todirfh_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 fromfh = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          fromfh_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 fh = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          fh_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .NFS.fileInfo fi = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_fi(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 size = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 offset = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          offset_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 dirfh = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          dirfh_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string path = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(_internal_mutable_path(), ptr, ctx, "NFS.request.path");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes data = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(_internal_mutable_data(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 isDataSync = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          isdatasync_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string command = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(_internal_mutable_command(), ptr, ctx, "NFS.request.command");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 gen = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 112)) {
          gen_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated int32 gens = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 122)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_gens(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 120) {
          _internal_add_gens(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* request::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:NFS.request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "NFS.request.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // .NFS.attributes attr = 2;
  if (this->has_attr()) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, _Internal::attr(this), target, stream);
  }

  // int32 todirfh = 3;
  if (this->todirfh() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_todirfh(), target);
  }

  // int32 fromfh = 4;
  if (this->fromfh() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_fromfh(), target);
  }

  // int32 fh = 5;
  if (this->fh() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_fh(), target);
  }

  // .NFS.fileInfo fi = 6;
  if (this->has_fi()) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        6, _Internal::fi(this), target, stream);
  }

  // int32 size = 7;
  if (this->size() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(7, this->_internal_size(), target);
  }

  // int32 offset = 8;
  if (this->offset() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(8, this->_internal_offset(), target);
  }

  // int32 dirfh = 9;
  if (this->dirfh() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(9, this->_internal_dirfh(), target);
  }

  // string path = 10;
  if (this->path().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_path().data(), static_cast<int>(this->_internal_path().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "NFS.request.path");
    target = stream->WriteStringMaybeAliased(
        10, this->_internal_path(), target);
  }

  // bytes data = 11;
  if (this->data().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        11, this->_internal_data(), target);
  }

  // int32 isDataSync = 12;
  if (this->isdatasync() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(12, this->_internal_isdatasync(), target);
  }

  // string command = 13;
  if (this->command().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_command().data(), static_cast<int>(this->_internal_command().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "NFS.request.command");
    target = stream->WriteStringMaybeAliased(
        13, this->_internal_command(), target);
  }

  // int32 gen = 14;
  if (this->gen() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(14, this->_internal_gen(), target);
  }

  // repeated int32 gens = 15;
  {
    int byte_size = _gens_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          15, _internal_gens(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:NFS.request)
  return target;
}

size_t request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NFS.request)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 gens = 15;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->gens_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _gens_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // string path = 10;
  if (this->path().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_path());
  }

  // bytes data = 11;
  if (this->data().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_data());
  }

  // string command = 13;
  if (this->command().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_command());
  }

  // .NFS.attributes attr = 2;
  if (this->has_attr()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *attr_);
  }

  // .NFS.fileInfo fi = 6;
  if (this->has_fi()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *fi_);
  }

  // int32 todirfh = 3;
  if (this->todirfh() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_todirfh());
  }

  // int32 fromfh = 4;
  if (this->fromfh() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_fromfh());
  }

  // int32 fh = 5;
  if (this->fh() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_fh());
  }

  // int32 size = 7;
  if (this->size() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_size());
  }

  // int32 offset = 8;
  if (this->offset() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_offset());
  }

  // int32 dirfh = 9;
  if (this->dirfh() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_dirfh());
  }

  // int32 isDataSync = 12;
  if (this->isdatasync() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_isdatasync());
  }

  // int32 gen = 14;
  if (this->gen() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_gen());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void request::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NFS.request)
  GOOGLE_DCHECK_NE(&from, this);
  const request* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<request>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NFS.request)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NFS.request)
    MergeFrom(*source);
  }
}

void request::MergeFrom(const request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NFS.request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  gens_.MergeFrom(from.gens_);
  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.path().size() > 0) {

    path_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.path_);
  }
  if (from.data().size() > 0) {

    data_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.data_);
  }
  if (from.command().size() > 0) {

    command_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.command_);
  }
  if (from.has_attr()) {
    _internal_mutable_attr()->::NFS::attributes::MergeFrom(from._internal_attr());
  }
  if (from.has_fi()) {
    _internal_mutable_fi()->::NFS::fileInfo::MergeFrom(from._internal_fi());
  }
  if (from.todirfh() != 0) {
    _internal_set_todirfh(from._internal_todirfh());
  }
  if (from.fromfh() != 0) {
    _internal_set_fromfh(from._internal_fromfh());
  }
  if (from.fh() != 0) {
    _internal_set_fh(from._internal_fh());
  }
  if (from.size() != 0) {
    _internal_set_size(from._internal_size());
  }
  if (from.offset() != 0) {
    _internal_set_offset(from._internal_offset());
  }
  if (from.dirfh() != 0) {
    _internal_set_dirfh(from._internal_dirfh());
  }
  if (from.isdatasync() != 0) {
    _internal_set_isdatasync(from._internal_isdatasync());
  }
  if (from.gen() != 0) {
    _internal_set_gen(from._internal_gen());
  }
}

void request::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NFS.request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void request::CopyFrom(const request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NFS.request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool request::IsInitialized() const {
  return true;
}

void request::InternalSwap(request* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  gens_.InternalSwap(&other->gens_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  path_.Swap(&other->path_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  data_.Swap(&other->data_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  command_.Swap(&other->command_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(attr_, other->attr_);
  swap(fi_, other->fi_);
  swap(todirfh_, other->todirfh_);
  swap(fromfh_, other->fromfh_);
  swap(fh_, other->fh_);
  swap(size_, other->size_);
  swap(offset_, other->offset_);
  swap(dirfh_, other->dirfh_);
  swap(isdatasync_, other->isdatasync_);
  swap(gen_, other->gen_);
}

::PROTOBUF_NAMESPACE_ID::Metadata request::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void response::InitAsDefaultInstance() {
  ::NFS::_response_default_instance_._instance.get_mutable()->fi_ = const_cast< ::NFS::fileInfo*>(
      ::NFS::fileInfo::internal_default_instance());
  ::NFS::_response_default_instance_._instance.get_mutable()->attr_ = const_cast< ::NFS::attributes*>(
      ::NFS::attributes::internal_default_instance());
}
class response::_Internal {
 public:
  static const ::NFS::fileInfo& fi(const response* msg);
  static const ::NFS::attributes& attr(const response* msg);
};

const ::NFS::fileInfo&
response::_Internal::fi(const response* msg) {
  return *msg->fi_;
}
const ::NFS::attributes&
response::_Internal::attr(const response* msg) {
  return *msg->attr_;
}
response::response()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:NFS.response)
}
response::response(const response& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      objects_(from.objects_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_data().empty()) {
    data_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.data_);
  }
  if (from._internal_has_fi()) {
    fi_ = new ::NFS::fileInfo(*from.fi_);
  } else {
    fi_ = nullptr;
  }
  if (from._internal_has_attr()) {
    attr_ = new ::NFS::attributes(*from.attr_);
  } else {
    attr_ = nullptr;
  }
  ::memcpy(&success_, &from.success_,
    static_cast<size_t>(reinterpret_cast<char*>(&datasize_) -
    reinterpret_cast<char*>(&success_)) + sizeof(datasize_));
  // @@protoc_insertion_point(copy_constructor:NFS.response)
}

void response::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_response_nfs_2eproto.base);
  data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&fi_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&datasize_) -
      reinterpret_cast<char*>(&fi_)) + sizeof(datasize_));
}

response::~response() {
  // @@protoc_insertion_point(destructor:NFS.response)
  SharedDtor();
}

void response::SharedDtor() {
  data_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete fi_;
  if (this != internal_default_instance()) delete attr_;
}

void response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const response& response::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_response_nfs_2eproto.base);
  return *internal_default_instance();
}


void response::Clear() {
// @@protoc_insertion_point(message_clear_start:NFS.response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  objects_.Clear();
  data_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && fi_ != nullptr) {
    delete fi_;
  }
  fi_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && attr_ != nullptr) {
    delete attr_;
  }
  attr_ = nullptr;
  ::memset(&success_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&datasize_) -
      reinterpret_cast<char*>(&success_)) + sizeof(datasize_));
  _internal_metadata_.Clear();
}

const char* response::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 fh = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          fh_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 success = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          success_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 err = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          err_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .NFS.fileInfo fi = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_fi(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes data = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(_internal_mutable_data(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 ern = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          ern_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 size = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .NFS.directory objects = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_objects(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<66>(ptr));
        } else goto handle_unusual;
        continue;
      // int32 status = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          status_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .NFS.attributes attr = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_attr(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 dataSize = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          datasize_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* response::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:NFS.response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 fh = 1;
  if (this->fh() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_fh(), target);
  }

  // uint64 success = 2;
  if (this->success() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_success(), target);
  }

  // uint64 err = 3;
  if (this->err() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->_internal_err(), target);
  }

  // .NFS.fileInfo fi = 4;
  if (this->has_fi()) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, _Internal::fi(this), target, stream);
  }

  // bytes data = 5;
  if (this->data().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        5, this->_internal_data(), target);
  }

  // int32 ern = 6;
  if (this->ern() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->_internal_ern(), target);
  }

  // int32 size = 7;
  if (this->size() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(7, this->_internal_size(), target);
  }

  // repeated .NFS.directory objects = 8;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_objects_size()); i < n; i++) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(8, this->_internal_objects(i), target, stream);
  }

  // int32 status = 9;
  if (this->status() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(9, this->_internal_status(), target);
  }

  // .NFS.attributes attr = 10;
  if (this->has_attr()) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        10, _Internal::attr(this), target, stream);
  }

  // int32 dataSize = 11;
  if (this->datasize() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(11, this->_internal_datasize(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:NFS.response)
  return target;
}

size_t response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NFS.response)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .NFS.directory objects = 8;
  total_size += 1UL * this->_internal_objects_size();
  for (const auto& msg : this->objects_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // bytes data = 5;
  if (this->data().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_data());
  }

  // .NFS.fileInfo fi = 4;
  if (this->has_fi()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *fi_);
  }

  // .NFS.attributes attr = 10;
  if (this->has_attr()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *attr_);
  }

  // uint64 success = 2;
  if (this->success() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_success());
  }

  // uint64 err = 3;
  if (this->err() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_err());
  }

  // int32 fh = 1;
  if (this->fh() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_fh());
  }

  // int32 ern = 6;
  if (this->ern() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_ern());
  }

  // int32 size = 7;
  if (this->size() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_size());
  }

  // int32 status = 9;
  if (this->status() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_status());
  }

  // int32 dataSize = 11;
  if (this->datasize() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_datasize());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void response::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NFS.response)
  GOOGLE_DCHECK_NE(&from, this);
  const response* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<response>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NFS.response)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NFS.response)
    MergeFrom(*source);
  }
}

void response::MergeFrom(const response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NFS.response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  objects_.MergeFrom(from.objects_);
  if (from.data().size() > 0) {

    data_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.data_);
  }
  if (from.has_fi()) {
    _internal_mutable_fi()->::NFS::fileInfo::MergeFrom(from._internal_fi());
  }
  if (from.has_attr()) {
    _internal_mutable_attr()->::NFS::attributes::MergeFrom(from._internal_attr());
  }
  if (from.success() != 0) {
    _internal_set_success(from._internal_success());
  }
  if (from.err() != 0) {
    _internal_set_err(from._internal_err());
  }
  if (from.fh() != 0) {
    _internal_set_fh(from._internal_fh());
  }
  if (from.ern() != 0) {
    _internal_set_ern(from._internal_ern());
  }
  if (from.size() != 0) {
    _internal_set_size(from._internal_size());
  }
  if (from.status() != 0) {
    _internal_set_status(from._internal_status());
  }
  if (from.datasize() != 0) {
    _internal_set_datasize(from._internal_datasize());
  }
}

void response::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NFS.response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void response::CopyFrom(const response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NFS.response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool response::IsInitialized() const {
  return true;
}

void response::InternalSwap(response* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  objects_.InternalSwap(&other->objects_);
  data_.Swap(&other->data_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(fi_, other->fi_);
  swap(attr_, other->attr_);
  swap(success_, other->success_);
  swap(err_, other->err_);
  swap(fh_, other->fh_);
  swap(ern_, other->ern_);
  swap(size_, other->size_);
  swap(status_, other->status_);
  swap(datasize_, other->datasize_);
}

::PROTOBUF_NAMESPACE_ID::Metadata response::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void attributes::InitAsDefaultInstance() {
}
class attributes::_Internal {
 public:
};

attributes::attributes()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:NFS.attributes)
}
attributes::attributes(const attributes& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&st_dev_, &from.st_dev_,
    static_cast<size_t>(reinterpret_cast<char*>(&st_attr_) -
    reinterpret_cast<char*>(&st_dev_)) + sizeof(st_attr_));
  // @@protoc_insertion_point(copy_constructor:NFS.attributes)
}

void attributes::SharedCtor() {
  ::memset(&st_dev_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&st_attr_) -
      reinterpret_cast<char*>(&st_dev_)) + sizeof(st_attr_));
}

attributes::~attributes() {
  // @@protoc_insertion_point(destructor:NFS.attributes)
  SharedDtor();
}

void attributes::SharedDtor() {
}

void attributes::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const attributes& attributes::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_attributes_nfs_2eproto.base);
  return *internal_default_instance();
}


void attributes::Clear() {
// @@protoc_insertion_point(message_clear_start:NFS.attributes)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&st_dev_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&st_attr_) -
      reinterpret_cast<char*>(&st_dev_)) + sizeof(st_attr_));
  _internal_metadata_.Clear();
}

const char* attributes::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 st_dev = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          st_dev_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 st_ino = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          st_ino_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 st_mode = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          st_mode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 st_nlink = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          st_nlink_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 st_uid = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          st_uid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 st_gid = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          st_gid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 st_rdev = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          st_rdev_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 st_size = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          st_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 st_catime = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          st_catime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 st_cmtime = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          st_cmtime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 st_cctime = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          st_cctime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 st_blksize = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          st_blksize_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 st_blocks = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          st_blocks_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 st_attr = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 112)) {
          st_attr_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* attributes::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:NFS.attributes)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 st_dev = 1;
  if (this->st_dev() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_st_dev(), target);
  }

  // uint64 st_ino = 2;
  if (this->st_ino() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_st_ino(), target);
  }

  // uint64 st_mode = 3;
  if (this->st_mode() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->_internal_st_mode(), target);
  }

  // uint64 st_nlink = 4;
  if (this->st_nlink() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(4, this->_internal_st_nlink(), target);
  }

  // uint64 st_uid = 5;
  if (this->st_uid() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(5, this->_internal_st_uid(), target);
  }

  // uint64 st_gid = 6;
  if (this->st_gid() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(6, this->_internal_st_gid(), target);
  }

  // uint64 st_rdev = 7;
  if (this->st_rdev() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(7, this->_internal_st_rdev(), target);
  }

  // uint64 st_size = 8;
  if (this->st_size() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(8, this->_internal_st_size(), target);
  }

  // uint64 st_catime = 9;
  if (this->st_catime() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(9, this->_internal_st_catime(), target);
  }

  // uint64 st_cmtime = 10;
  if (this->st_cmtime() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(10, this->_internal_st_cmtime(), target);
  }

  // uint64 st_cctime = 11;
  if (this->st_cctime() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(11, this->_internal_st_cctime(), target);
  }

  // uint64 st_blksize = 12;
  if (this->st_blksize() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(12, this->_internal_st_blksize(), target);
  }

  // uint64 st_blocks = 13;
  if (this->st_blocks() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(13, this->_internal_st_blocks(), target);
  }

  // uint64 st_attr = 14;
  if (this->st_attr() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(14, this->_internal_st_attr(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:NFS.attributes)
  return target;
}

size_t attributes::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NFS.attributes)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 st_dev = 1;
  if (this->st_dev() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_st_dev());
  }

  // uint64 st_ino = 2;
  if (this->st_ino() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_st_ino());
  }

  // uint64 st_mode = 3;
  if (this->st_mode() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_st_mode());
  }

  // uint64 st_nlink = 4;
  if (this->st_nlink() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_st_nlink());
  }

  // uint64 st_uid = 5;
  if (this->st_uid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_st_uid());
  }

  // uint64 st_gid = 6;
  if (this->st_gid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_st_gid());
  }

  // uint64 st_rdev = 7;
  if (this->st_rdev() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_st_rdev());
  }

  // uint64 st_size = 8;
  if (this->st_size() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_st_size());
  }

  // uint64 st_catime = 9;
  if (this->st_catime() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_st_catime());
  }

  // uint64 st_cmtime = 10;
  if (this->st_cmtime() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_st_cmtime());
  }

  // uint64 st_cctime = 11;
  if (this->st_cctime() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_st_cctime());
  }

  // uint64 st_blksize = 12;
  if (this->st_blksize() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_st_blksize());
  }

  // uint64 st_blocks = 13;
  if (this->st_blocks() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_st_blocks());
  }

  // uint64 st_attr = 14;
  if (this->st_attr() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_st_attr());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void attributes::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NFS.attributes)
  GOOGLE_DCHECK_NE(&from, this);
  const attributes* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<attributes>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NFS.attributes)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NFS.attributes)
    MergeFrom(*source);
  }
}

void attributes::MergeFrom(const attributes& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NFS.attributes)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.st_dev() != 0) {
    _internal_set_st_dev(from._internal_st_dev());
  }
  if (from.st_ino() != 0) {
    _internal_set_st_ino(from._internal_st_ino());
  }
  if (from.st_mode() != 0) {
    _internal_set_st_mode(from._internal_st_mode());
  }
  if (from.st_nlink() != 0) {
    _internal_set_st_nlink(from._internal_st_nlink());
  }
  if (from.st_uid() != 0) {
    _internal_set_st_uid(from._internal_st_uid());
  }
  if (from.st_gid() != 0) {
    _internal_set_st_gid(from._internal_st_gid());
  }
  if (from.st_rdev() != 0) {
    _internal_set_st_rdev(from._internal_st_rdev());
  }
  if (from.st_size() != 0) {
    _internal_set_st_size(from._internal_st_size());
  }
  if (from.st_catime() != 0) {
    _internal_set_st_catime(from._internal_st_catime());
  }
  if (from.st_cmtime() != 0) {
    _internal_set_st_cmtime(from._internal_st_cmtime());
  }
  if (from.st_cctime() != 0) {
    _internal_set_st_cctime(from._internal_st_cctime());
  }
  if (from.st_blksize() != 0) {
    _internal_set_st_blksize(from._internal_st_blksize());
  }
  if (from.st_blocks() != 0) {
    _internal_set_st_blocks(from._internal_st_blocks());
  }
  if (from.st_attr() != 0) {
    _internal_set_st_attr(from._internal_st_attr());
  }
}

void attributes::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NFS.attributes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void attributes::CopyFrom(const attributes& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NFS.attributes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool attributes::IsInitialized() const {
  return true;
}

void attributes::InternalSwap(attributes* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(st_dev_, other->st_dev_);
  swap(st_ino_, other->st_ino_);
  swap(st_mode_, other->st_mode_);
  swap(st_nlink_, other->st_nlink_);
  swap(st_uid_, other->st_uid_);
  swap(st_gid_, other->st_gid_);
  swap(st_rdev_, other->st_rdev_);
  swap(st_size_, other->st_size_);
  swap(st_catime_, other->st_catime_);
  swap(st_cmtime_, other->st_cmtime_);
  swap(st_cctime_, other->st_cctime_);
  swap(st_blksize_, other->st_blksize_);
  swap(st_blocks_, other->st_blocks_);
  swap(st_attr_, other->st_attr_);
}

::PROTOBUF_NAMESPACE_ID::Metadata attributes::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void fileInfo::InitAsDefaultInstance() {
}
class fileInfo::_Internal {
 public:
};

fileInfo::fileInfo()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:NFS.fileInfo)
}
fileInfo::fileInfo(const fileInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&fh_, &from.fh_,
    static_cast<size_t>(reinterpret_cast<char*>(&flags_) -
    reinterpret_cast<char*>(&fh_)) + sizeof(flags_));
  // @@protoc_insertion_point(copy_constructor:NFS.fileInfo)
}

void fileInfo::SharedCtor() {
  ::memset(&fh_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&flags_) -
      reinterpret_cast<char*>(&fh_)) + sizeof(flags_));
}

fileInfo::~fileInfo() {
  // @@protoc_insertion_point(destructor:NFS.fileInfo)
  SharedDtor();
}

void fileInfo::SharedDtor() {
}

void fileInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const fileInfo& fileInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_fileInfo_nfs_2eproto.base);
  return *internal_default_instance();
}


void fileInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:NFS.fileInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&fh_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&flags_) -
      reinterpret_cast<char*>(&fh_)) + sizeof(flags_));
  _internal_metadata_.Clear();
}

const char* fileInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 fh = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          fh_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 flags = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          flags_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* fileInfo::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:NFS.fileInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 fh = 1;
  if (this->fh() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_fh(), target);
  }

  // uint32 flags = 2;
  if (this->flags() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_flags(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:NFS.fileInfo)
  return target;
}

size_t fileInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NFS.fileInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 fh = 1;
  if (this->fh() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_fh());
  }

  // uint32 flags = 2;
  if (this->flags() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_flags());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void fileInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NFS.fileInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const fileInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<fileInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NFS.fileInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NFS.fileInfo)
    MergeFrom(*source);
  }
}

void fileInfo::MergeFrom(const fileInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NFS.fileInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.fh() != 0) {
    _internal_set_fh(from._internal_fh());
  }
  if (from.flags() != 0) {
    _internal_set_flags(from._internal_flags());
  }
}

void fileInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NFS.fileInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void fileInfo::CopyFrom(const fileInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NFS.fileInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool fileInfo::IsInitialized() const {
  return true;
}

void fileInfo::InternalSwap(fileInfo* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(fh_, other->fh_);
  swap(flags_, other->flags_);
}

::PROTOBUF_NAMESPACE_ID::Metadata fileInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void directory::InitAsDefaultInstance() {
  ::NFS::_directory_default_instance_._instance.get_mutable()->attr_ = const_cast< ::NFS::attributes*>(
      ::NFS::attributes::internal_default_instance());
}
class directory::_Internal {
 public:
  static const ::NFS::attributes& attr(const directory* msg);
};

const ::NFS::attributes&
directory::_Internal::attr(const directory* msg) {
  return *msg->attr_;
}
directory::directory()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:NFS.directory)
}
directory::directory(const directory& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from._internal_has_attr()) {
    attr_ = new ::NFS::attributes(*from.attr_);
  } else {
    attr_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:NFS.directory)
}

void directory::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_directory_nfs_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  attr_ = nullptr;
}

directory::~directory() {
  // @@protoc_insertion_point(destructor:NFS.directory)
  SharedDtor();
}

void directory::SharedDtor() {
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete attr_;
}

void directory::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const directory& directory::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_directory_nfs_2eproto.base);
  return *internal_default_instance();
}


void directory::Clear() {
// @@protoc_insertion_point(message_clear_start:NFS.directory)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && attr_ != nullptr) {
    delete attr_;
  }
  attr_ = nullptr;
  _internal_metadata_.Clear();
}

const char* directory::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(_internal_mutable_name(), ptr, ctx, "NFS.directory.name");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .NFS.attributes attr = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_attr(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* directory::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:NFS.directory)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "NFS.directory.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // .NFS.attributes attr = 2;
  if (this->has_attr()) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, _Internal::attr(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:NFS.directory)
  return target;
}

size_t directory::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NFS.directory)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // .NFS.attributes attr = 2;
  if (this->has_attr()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *attr_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void directory::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NFS.directory)
  GOOGLE_DCHECK_NE(&from, this);
  const directory* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<directory>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NFS.directory)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NFS.directory)
    MergeFrom(*source);
  }
}

void directory::MergeFrom(const directory& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NFS.directory)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.has_attr()) {
    _internal_mutable_attr()->::NFS::attributes::MergeFrom(from._internal_attr());
  }
}

void directory::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NFS.directory)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void directory::CopyFrom(const directory& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NFS.directory)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool directory::IsInitialized() const {
  return true;
}

void directory::InternalSwap(directory* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(attr_, other->attr_);
}

::PROTOBUF_NAMESPACE_ID::Metadata directory::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace NFS
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::NFS::request* Arena::CreateMaybeMessage< ::NFS::request >(Arena* arena) {
  return Arena::CreateInternal< ::NFS::request >(arena);
}
template<> PROTOBUF_NOINLINE ::NFS::response* Arena::CreateMaybeMessage< ::NFS::response >(Arena* arena) {
  return Arena::CreateInternal< ::NFS::response >(arena);
}
template<> PROTOBUF_NOINLINE ::NFS::attributes* Arena::CreateMaybeMessage< ::NFS::attributes >(Arena* arena) {
  return Arena::CreateInternal< ::NFS::attributes >(arena);
}
template<> PROTOBUF_NOINLINE ::NFS::fileInfo* Arena::CreateMaybeMessage< ::NFS::fileInfo >(Arena* arena) {
  return Arena::CreateInternal< ::NFS::fileInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::NFS::directory* Arena::CreateMaybeMessage< ::NFS::directory >(Arena* arena) {
  return Arena::CreateInternal< ::NFS::directory >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
